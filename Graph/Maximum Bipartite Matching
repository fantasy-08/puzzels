//Better algorithm (efficient -> https://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-2-implementation/)

// A C++ program to find maximal 
// Bipartite matching. 
#include <iostream> 
#include <string.h> 
using namespace std; 
  
// M is number of applicants  
// and N is number of jobs 
#define M 6 
#define N 6 
  
// A DFS based recursive function  
// that returns true if a matching 
// for vertex u is possible 
bool bpm(bool bpGraph[M][N], int u, 
         bool seen[], int matchR[]) 
{ 
    // Try every job one by one 
    for (int v = 0; v < N; v++) 
    { 
        // If applicant u is interested in  
        // job v and v is not visited 
        if (bpGraph[u][v] && !seen[v]) 
        { 
            // Mark v as visited 
            seen[v] = true;  
  
            // If job 'v' is not assigned to an  
            // applicant OR previously assigned  
            // applicant for job v (which is matchR[v])  
            // has an alternate job available.  
            // Since v is marked as visited in  
            // the above line, matchR[v] in the following  
            // recursive call will not get job 'v' again 
            if (matchR[v] < 0 || bpm(bpGraph, matchR[v], 
                                     seen, matchR)) 
            { 
                matchR[v] = u; 
                return true; 
            } 
        } 
    } 
    return false; 
} 
  
// Returns maximum number 
// of matching from M to N 
int maxBPM(bool bpGraph[M][N]) 
{ 
    // An array to keep track of the  
    // applicants assigned to jobs.  
    // The value of matchR[i] is the  
    // applicant number assigned to job i, 
    // the value -1 indicates nobody is 
    // assigned. 
    int matchR[N]; 
  
    // Initially all jobs are available 
    memset(matchR, -1, sizeof(matchR)); 
  
    // Count of jobs assigned to applicants 
    int result = 0;  
    for (int u = 0; u < M; u++) 
    { 
        // Mark all jobs as not seen  
        // for next applicant. 
        bool seen[N]; 
        memset(seen, 0, sizeof(seen)); 
  
        // Find if the applicant 'u' can get a job 
        if (bpm(bpGraph, u, seen, matchR)) 
            result++; 
    } 
    return result; 
} 
  
// Driver Code 
int main() 
{ 
    // Let us create a bpGraph  
    // shown in the above example 
    bool bpGraph[M][N] = {{0, 1, 1, 0, 0, 0}, 
                          {1, 0, 0, 1, 0, 0}, 
                          {0, 0, 1, 0, 0, 0}, 
                          {0, 0, 1, 1, 0, 0}, 
                          {0, 0, 0, 0, 0, 0}, 
                          {0, 0, 0, 0, 0, 1}}; 
  
    cout << "Maximum number of applicants that can get job is "
         << maxBPM(bpGraph); 
  
    return 0; 
}


/*
Adj list solution
asked in airtel | Microsoft

bool bpm(map<int,set<int>>&adj, int u,vector<bool>&seen, vector<int>&matchR,int m,int n)
{
    for (int v = 0; v < n; v++)
    {
        if (adj[u].find(v)!=adj[u].end() && !seen[v])
        {
            seen[v] = true;
            if (matchR[v] < 0 || bpm(adj, matchR[v],seen, matchR,m,n))
            {
                matchR[v] = u;
                return true;
            }
        }
    }
    return false;
}
// n = slots
int maxBP(map<int,set<int>>&adj,int m,int n){
    vector<int>matchR(n,-1);
    int result = 0;
    for (int u = 0; u < m; u++)
    {
        vector<bool>seen(n,false);
        if (bpm(adj, n+u, seen, matchR,m,n))
            result++;
    }
    return result;
}

bool go(vector<int>a,vector<int>b,int s){
    int n=a.size();
    map<int,set<int>>adj;
    // per. starts from n to 2*n - 1
    // slot 0 -> s-1
    for(int i=0;i<n;i++){
        adj[s+i].insert(a[i]-1),adj[s+i].insert(b[i]-1);
    }
    
    int max_ = maxBP(adj,n,s);
    return max_ == n;
}


int main()
{
    cout << go({1,1,3},{2,2,1},3)<<endl;
    cout << go({3,2,3,1},{1,3,1,2},3)<<endl;
    cout << go({2,5,6,5},{5,4,2,2},8)<<endl;
    return 0;
}

*/
