class Solution {
public:
    const int m = 1e9 + 7;
    int dp[100001][3];
    int go(int pos, int s, string& a) {
        if(pos >= a.size())
            return s == 2;
        if(s>2)
            return 0;
        if (dp[pos][s]!=-1)
            return dp[pos][s];
        int ans = 0;
        if (a[pos] == 'S') {
            if(s==2) {
                ans = (ans%m + go(pos+1, 1, a)%m)%m;
            } else {
                ans = (ans%m + go(pos+1, s+1, a)%m)%m;
            }
        } else {
            ans = (ans%m + go(pos+1, s, a)%m)%m;
            if(s==2){
                ans = (ans%m + go(pos+1, 0, a)%m)%m;
            }
        }
        return dp[pos][s] = ans%m;
    }
    int numberOfWays(string corridor) {
        memset(dp, -1, sizeof(dp));
        return go(0,0,corridor);
    }
};
